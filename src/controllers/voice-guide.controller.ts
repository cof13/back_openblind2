import { 
  Controller, 
  Get, 
  Post, 
  Body, 
  Patch, 
  Param, 
  Delete, 
  Query,
  ParseIntPipe,
  HttpCode,
  HttpStatus,
  UseGuards,
  UseInterceptors,
  ClassSerializerInterceptor
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger';
import { VoiceGuideService } from '../services/voice-guide.service';
import { CreateVoiceGuideDto } from '../modules/voice-guide/dto/create-voice-guide.dto';
import { UpdateVoiceGuideDto } from '../modules/voice-guide/dto/update-voice-guide.dto';
import { QueryVoiceGuideDto } from '../modules/voice-guide/dto/query-voice-guide.dto';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../auth/decorators/roles.decorator';

@ApiTags('Gu√≠as de Voz')
@Controller('voice-guides') // üîó RUTA BASE: '/voice-guides' - TODAS LAS RUTAS AGRUPADAS BAJO ESTA BASE
@UseGuards(JwtAuthGuard) // üîê AUTENTICACI√ìN: Aplica a todas las rutas - AGRUPACI√ìN GLOBAL DE SEGURIDAD
@UseInterceptors(ClassSerializerInterceptor)
export class VoiceGuideController {
  constructor(private readonly voiceGuideService: VoiceGuideService) {}

  // ========================================
  // üìù OPERACIONES CRUD B√ÅSICAS - GRUPO 1: RUTAS EST√ÅNDAR
  // ========================================

  /**
   * üÜï CREAR - POST /voice-guides
   * AGRUPADA: Hereda autenticaci√≥n JWT del controlador
   * SEPARADA: Tiene su propio guard adicional para roles espec√≠ficos
   */
  @Post()
  @HttpCode(HttpStatus.CREATED)
  @UseGuards(RolesGuard) // üîê SEPARACI√ìN: Guard adicional espec√≠fico para editores
  @Roles('Super Administrador', 'Administrador', 'Editor')
  @ApiBearerAuth()
  @ApiOperation({ summary: 'Crear nueva gu√≠a de voz' })
  @ApiResponse({ status: 201, description: 'Gu√≠a de voz creada exitosamente' })
  create(@Body() createVoiceGuideDto: CreateVoiceGuideDto) {
    return this.voiceGuideService.create(createVoiceGuideDto);
  }

  /**
   * üìã LEER TODOS - GET /voice-guides
   * AGRUPADA: Solo usa la autenticaci√≥n JWT del controlador
   * SEPARADA: Sin guards adicionales - acceso p√∫blico (solo JWT)
   */
  @Get()
  @ApiOperation({ summary: 'Obtener todas las gu√≠as de voz con filtros' })
  @ApiResponse({ status: 200, description: 'Lista de gu√≠as de voz' })
  findAll(@Query() queryDto: QueryVoiceGuideDto) {
    return this.voiceGuideService.findAll(queryDto);
  }

  // ========================================
  // üîç RUTAS ESPECIALIZADAS - GRUPO 2: CONSULTAS ESPEC√çFICAS
  // ‚ö†Ô∏è SEPARACI√ìN CR√çTICA: Estas rutas VAN ANTES de ':id' para evitar conflictos
  // ========================================

  /**
   * ‚úÖ GU√çAS ACTIVAS - GET /voice-guides/active
   * AGRUPADA: Hereda autenticaci√≥n JWT del controlador
   * SEPARADA: Ruta espec√≠fica que debe ir antes de ':id'
   */
  @Get('active')
  @ApiOperation({ summary: 'Obtener solo gu√≠as de voz activas' })
  @ApiResponse({ status: 200, description: 'Lista de gu√≠as de voz activas' })
  findActiveGuides() {
    return this.voiceGuideService.findActiveGuides();
  }

  /**
   * üìä ESTAD√çSTICAS - GET /voice-guides/statistics
   * AGRUPADA: Hereda autenticaci√≥n JWT del controlador
   * SEPARADA: Guard adicional para roles administrativos
   */
  @Get('statistics')
  @UseGuards(RolesGuard) // üîê SEPARACI√ìN: Guard espec√≠fico para administradores
  @Roles('Super Administrador', 'Administrador')
  @ApiBearerAuth()
  @ApiOperation({ summary: 'Obtener estad√≠sticas de gu√≠as de voz' })
  @ApiResponse({ status: 200, description: 'Estad√≠sticas de gu√≠as de voz' })
  getStatistics() {
    return this.voiceGuideService.getVoiceGuideStatistics();
  }

  // ========================================
  // üîç RUTAS CON PAR√ÅMETROS ESPEC√çFICOS - GRUPO 3: CONSULTAS CON PAR√ÅMETROS
  // ‚ö†Ô∏è SEPARACI√ìN CR√çTICA: Estas rutas VAN ANTES de ':id' para evitar conflictos
  // ========================================

  /**
   * üõ£Ô∏è GU√çAS POR RUTA - GET /voice-guides/route/:routeId
   * AGRUPADA: Hereda autenticaci√≥n JWT del controlador
   * SEPARADA: Ruta espec√≠fica con par√°metro propio
   */
  @Get('route/:routeId')
  @ApiOperation({ summary: 'Obtener gu√≠as de voz por ruta' })
  @ApiResponse({ status: 200, description: 'Gu√≠as de voz de la ruta especificada' })
  findByRoute(@Param('routeId', ParseIntPipe) routeId: number) {
    return this.voiceGuideService.findByRoute(routeId);
  }

  /**
   * üí¨ GU√çAS POR MENSAJE - GET /voice-guides/message/:messageId
   * AGRUPADA: Hereda autenticaci√≥n JWT del controlador
   * SEPARADA: Ruta espec√≠fica con par√°metro propio
   */
  @Get('message/:messageId')
  @ApiOperation({ summary: 'Obtener gu√≠as de voz por mensaje' })
  @ApiResponse({ status: 200, description: 'Gu√≠as de voz del mensaje especificado' })
  findByMessage(@Param('messageId', ParseIntPipe) messageId: number) {
    return this.voiceGuideService.findByMessage(messageId);
  }

  // ========================================
  // üîç RUTAS CON PAR√ÅMETROS ID - GRUPO 4: OPERACIONES POR ID
  // ‚ö†Ô∏è SEPARACI√ìN CR√çTICA: Estas rutas VAN DESPU√âS de todas las rutas espec√≠ficas
  // ========================================

  /**
   * üîç LEER UNO - GET /voice-guides/:id
   * AGRUPADA: Hereda autenticaci√≥n JWT del controlador
   * SEPARADA: Colocada despu√©s de rutas espec√≠ficas para evitar conflictos
   */
  @Get(':id')
  @ApiOperation({ summary: 'Obtener gu√≠a de voz por ID' })
  @ApiResponse({ status: 200, description: 'Gu√≠a de voz encontrada' })
  @ApiResponse({ status: 404, description: 'Gu√≠a de voz no encontrada' })
  findOne(@Param('id', ParseIntPipe) id: number) {
    return this.voiceGuideService.findOne(id);
  }

  /**
   * üìà GU√çA CON ESTAD√çSTICAS - GET /voice-guides/:id/stats
   * AGRUPADA: Hereda autenticaci√≥n JWT del controlador
   * SEPARADA: Extiende la ruta ':id' con funcionalidad de estad√≠sticas
   */
  @Get(':id/stats')
  @ApiOperation({ summary: 'Obtener gu√≠a de voz con estad√≠sticas' })
  @ApiResponse({ status: 200, description: 'Gu√≠a de voz con estad√≠sticas completas' })
  findOneWithStats(@Param('id', ParseIntPipe) id: number) {
    return this.voiceGuideService.findOneWithStats(id);
  }

  // ========================================
  // ‚úèÔ∏è OPERACIONES DE ACTUALIZACI√ìN - GRUPO 5: RUTAS PATCH
  // ========================================

  /**
   * ‚úèÔ∏è ACTUALIZAR - PATCH /voice-guides/:id
   * AGRUPADA: Hereda autenticaci√≥n JWT del controlador
   * SEPARADA: Guard adicional espec√≠fico para roles de edici√≥n
   */
  @Patch(':id')
  @UseGuards(RolesGuard) // üîê SEPARACI√ìN: Guard espec√≠fico para editores
  @Roles('Super Administrador', 'Administrador', 'Editor')
  @ApiBearerAuth()
  @ApiOperation({ summary: 'Actualizar gu√≠a de voz' })
  @ApiResponse({ status: 200, description: 'Gu√≠a de voz actualizada exitosamente' })
  update(
    @Param('id', ParseIntPipe) id: number, 
    @Body() updateVoiceGuideDto: UpdateVoiceGuideDto
  ) {
    return this.voiceGuideService.update(id, updateVoiceGuideDto);
  }

  /**
   * üìä ACTUALIZAR REPRODUCCI√ìN - PATCH /voice-guides/:id/playback
   * AGRUPADA: Hereda autenticaci√≥n JWT del controlador
   * SEPARADA: Operaci√≥n espec√≠fica para tracking de reproducci√≥n
   */
  @Patch(':id/playback')
  @ApiOperation({ summary: 'Actualizar estad√≠sticas de reproducci√≥n' })
  @ApiResponse({ status: 200, description: 'Estad√≠sticas actualizadas' })
  updatePlaybackStats(
    @Param('id', ParseIntPipe) id: number,
    @Body() playbackData: { playbackTime: number }
  ) {
    return this.voiceGuideService.updatePlaybackStats(id, playbackData.playbackTime);
  }

  // ========================================
  // üóëÔ∏è OPERACIONES DE ELIMINACI√ìN - GRUPO 6: RUTAS DELETE
  // ========================================

  /**
   * üóëÔ∏è ELIMINAR - DELETE /voice-guides/:id
   * AGRUPADA: Hereda autenticaci√≥n JWT del controlador
   * SEPARADA: Guard adicional espec√≠fico para roles administrativos
   */
  @Delete(':id')
  @HttpCode(HttpStatus.NO_CONTENT)
  @UseGuards(RolesGuard) // üîê SEPARACI√ìN: Guard espec√≠fico para administradores
  @Roles('Super Administrador', 'Administrador')
  @ApiBearerAuth()
  @ApiOperation({ summary: 'Eliminar gu√≠a de voz' })
  @ApiResponse({ status: 204, description: 'Gu√≠a de voz eliminada exitosamente' })
  remove(@Param('id', ParseIntPipe) id: number) {
    return this.voiceGuideService.remove(id);
  }
}
