import { 
  Controller, 
  Get, 
  Post, 
  Body, 
  Patch, 
  Param, 
  Delete, 
  ParseIntPipe,
  HttpCode,
  HttpStatus,
  UseInterceptors,
  ClassSerializerInterceptor
} from '@nestjs/common';
import { UserService } from '../services/user.service';
import { CreateUserDto } from '../modules/user/dto/create-user.dto';
import { UpdateUserDto } from '../modules/user/dto/update-user.dto';
import { ChangePasswordDto } from '../modules/user/dto/change-password.dto';

@Controller('users') // üîó RUTA BASE: '/users' - TODAS LAS RUTAS AGRUPADAS BAJO ESTA BASE
@UseInterceptors(ClassSerializerInterceptor)
export class UserController {
  constructor(private readonly userService: UserService) {}

  // ========================================
  // üìù OPERACIONES CRUD B√ÅSICAS - GRUPO 1: RUTAS EST√ÅNDAR
  // ‚ö†Ô∏è SEPARACI√ìN: Sin guards - ACCESO P√öBLICO TOTAL
  // ========================================

  /**
   * üÜï CREAR - POST /users
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: Sin autenticaci√≥n - acceso p√∫blico para registro
   */
  @Post()
  @HttpCode(HttpStatus.CREATED)
  create(@Body() createUserDto: CreateUserDto) {
    return this.userService.create(createUserDto);
  }

  /**
   * üìã LEER TODOS - GET /users
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: Sin autenticaci√≥n - acceso p√∫blico
   */
  @Get()
  findAll() {
    return this.userService.findAll();
  }

  // ========================================
  // üîç RUTAS ESPECIALIZADAS - GRUPO 2: CONSULTAS ESPEC√çFICAS
  // ‚ö†Ô∏è SEPARACI√ìN CR√çTICA: Esta ruta VA ANTES de ':id' para evitar conflictos
  // ========================================

  /**
   * ‚úÖ USUARIOS ACTIVOS - GET /users/active
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: Ruta espec√≠fica que debe ir antes de ':id'
   */
  @Get('active')
  findActiveUsers() {
    return this.userService.findActiveUsers();
  }

  // ========================================
  // üîç RUTAS CON PAR√ÅMETROS ID - GRUPO 3: OPERACIONES POR ID
  // ‚ö†Ô∏è SEPARACI√ìN CR√çTICA: Estas rutas VAN DESPU√âS de rutas espec√≠ficas
  // ========================================

  /**
   * üîç LEER UNO - GET /users/:id
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: Colocada despu√©s de rutas espec√≠ficas para evitar conflictos
   */
  @Get(':id')
  findOne(@Param('id', ParseIntPipe) id: number) {
    return this.userService.findOne(id);
  }

  /**
   * üë§ PERFIL DE USUARIO - GET /users/:id/profile
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: Extiende la ruta ':id' con funcionalidad espec√≠fica de perfil
   */
  @Get(':id/profile')
  getUserProfile(@Param('id', ParseIntPipe) id: number) {
    return this.userService.getUserProfile(id);
  }

  // ========================================
  // ‚úèÔ∏è OPERACIONES DE ACTUALIZACI√ìN - GRUPO 4: RUTAS PATCH
  // ========================================

  /**
   * ‚úèÔ∏è ACTUALIZAR USUARIO - PATCH /users/:id
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: Sin autenticaci√≥n - acceso p√∫blico
   */
  @Patch(':id')
  update(
    @Param('id', ParseIntPipe) id: number, 
    @Body() updateUserDto: UpdateUserDto
  ) {
    return this.userService.update(id, updateUserDto);
  }

  /**
   * üë§ ACTUALIZAR PERFIL - PATCH /users/:id/profile
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: Operaci√≥n espec√≠fica para actualizar perfil de usuario
   */
  @Patch(':id/profile')
  updateUserProfile(
    @Param('id', ParseIntPipe) id: number,
    @Body() profileData: any
  ) {
    return this.userService.updateUserProfile(id, profileData);
  }

  /**
   * üîê CAMBIAR CONTRASE√ëA - PATCH /users/:id/change-password
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: Operaci√≥n espec√≠fica para cambio de contrase√±a
   */
  @Patch(':id/change-password')
  @HttpCode(HttpStatus.NO_CONTENT)
  changePassword(
    @Param('id', ParseIntPipe) id: number,
    @Body() changePasswordDto: ChangePasswordDto
  ) {
    return this.userService.changePassword(id, changePasswordDto);
  }

  /**
   * üïí ACTUALIZAR √öLTIMO ACCESO - PATCH /users/:id/update-last-access
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: Operaci√≥n espec√≠fica para tracking de acceso
   */
  @Patch(':id/update-last-access')
  @HttpCode(HttpStatus.NO_CONTENT)
  updateLastAccess(@Param('id', ParseIntPipe) id: number) {
    return this.userService.updateLastAccess(id);
  }

  // ========================================
  // üóëÔ∏è OPERACIONES DE ELIMINACI√ìN - GRUPO 5: RUTAS DELETE
  // ========================================

  /**
   * üóëÔ∏è ELIMINAR USUARIO - DELETE /users/:id
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: Sin autenticaci√≥n - acceso p√∫blico
   */
  @Delete(':id')
  @HttpCode(HttpStatus.NO_CONTENT)
  remove(@Param('id', ParseIntPipe) id: number) {
    return this.userService.remove(id);
  }
}
