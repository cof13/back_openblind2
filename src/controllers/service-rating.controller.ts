import { 
  Controller, 
  Get, 
  Post, 
  Body, 
  Patch, 
  Param, 
  Delete, 
  Query,
  ParseIntPipe,
  HttpCode,
  HttpStatus,
  UseGuards,
  UseInterceptors,
  ClassSerializerInterceptor
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger';
import { ServiceRatingService } from '../services/service-rating.service';
import { CreateServiceRatingDto } from '../modules/service-rating/dto/create-service-rating.dto';
import { UpdateServiceRatingDto } from '../modules/service-rating/dto/update-service-rating.dto';
import { QueryServiceRatingDto } from '../modules/service-rating/dto/query-service-rating.dto';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../auth/decorators/roles.decorator';
import { GetUser } from '../auth/decorators/get-user.decorator';
import { User } from '../models/mysql/user.entity';
import { Public } from '../auth/decorators/public.decorator';

@ApiTags('Calificaciones de Servicios')
@Controller('service-ratings') // üîó RUTA BASE: '/service-ratings' - TODAS LAS RUTAS AGRUPADAS BAJO ESTA BASE
@UseInterceptors(ClassSerializerInterceptor)
export class ServiceRatingController {
  constructor(private readonly serviceRatingService: ServiceRatingService) {}

  // ========================================
  // üìù OPERACIONES CRUD B√ÅSICAS - GRUPO 1: RUTAS EST√ÅNDAR
  // ========================================

  /**
   * üÜï CREAR - POST /service-ratings
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: Guard espec√≠fico JWT para esta ruta (no global)
   */
  @Post()
  @HttpCode(HttpStatus.CREATED)
  @UseGuards(JwtAuthGuard) // üîê SEPARACI√ìN: Guard espec√≠fico para esta ruta
  @ApiBearerAuth()
  @ApiOperation({ summary: 'Crear nueva calificaci√≥n de servicio' })
  @ApiResponse({ status: 201, description: 'Calificaci√≥n creada exitosamente' })
  async create(
    @Body() createRatingDto: CreateServiceRatingDto,
    @GetUser() user: User
  ) {
    createRatingDto.id_usuario_evaluador = user.id_usuario;
    return this.serviceRatingService.create(createRatingDto);
  }

  /**
   * üìã LEER TODOS - GET /service-ratings
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: Marcada como @Public() - acceso completamente p√∫blico
   */
  @Get()
  @Public() // üîì SEPARACI√ìN: Acceso p√∫blico sin autenticaci√≥n
  @ApiOperation({ summary: 'Obtener todas las calificaciones con filtros' })
  @ApiResponse({ status: 200, description: 'Lista de calificaciones' })
  findAll(@Query() queryDto: QueryServiceRatingDto) {
    return this.serviceRatingService.findAll(queryDto);
  }

  // ========================================
  // üîç RUTAS ESPECIALIZADAS - GRUPO 2: CONSULTAS ESPEC√çFICAS
  // ‚ö†Ô∏è SEPARACI√ìN CR√çTICA: Estas rutas VAN ANTES de ':id' para evitar conflictos
  // ========================================

  /**
   * üìä ESTAD√çSTICAS - GET /service-ratings/statistics
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: Guards espec√≠ficos para administradores
   */
  @Get('statistics')
  @UseGuards(JwtAuthGuard, RolesGuard) // üîê SEPARACI√ìN: Guards espec√≠ficos para administradores
  @Roles('Super Administrador', 'Administrador')
  @ApiBearerAuth()
  @ApiOperation({ summary: 'Obtener estad√≠sticas de calificaciones' })
  @ApiResponse({ status: 200, description: 'Estad√≠sticas de calificaciones' })
  getStatistics() {
    return this.serviceRatingService.getRatingStatistics();
  }

  /**
   * üîß SERVICIOS - GET /service-ratings/services
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: @Public() - acceso completamente p√∫blico
   */
  @Get('services')
  @Public() // üîì SEPARACI√ìN: Acceso p√∫blico sin autenticaci√≥n
  @ApiOperation({ summary: 'Obtener lista de servicios √∫nicos' })
  @ApiResponse({ status: 200, description: 'Lista de servicios' })
  getServices() {
    return this.serviceRatingService.getUniqueServices();
  }

  /**
   * üìÇ CATEGOR√çAS - GET /service-ratings/categories
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: @Public() - acceso completamente p√∫blico
   */
  @Get('categories')
  @Public() // üîì SEPARACI√ìN: Acceso p√∫blico sin autenticaci√≥n
  @ApiOperation({ summary: 'Obtener lista de categor√≠as √∫nicas' })
  @ApiResponse({ status: 200, description: 'Lista de categor√≠as' })
  getCategories() {
    return this.serviceRatingService.getUniqueCategories();
  }

  /**
   * üî• TRENDING - GET /service-ratings/trending
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: @Public() - acceso completamente p√∫blico
   */
  @Get('trending')
  @Public() // üîì SEPARACI√ìN: Acceso p√∫blico sin autenticaci√≥n
  @ApiOperation({ summary: 'Obtener servicios con mejores tendencias' })
  @ApiResponse({ status: 200, description: 'Servicios trending' })
  getTrendingServices() {
    return this.serviceRatingService.getTrendingServices();
  }

  // ========================================
  // üîç RUTAS CON PAR√ÅMETROS ESPEC√çFICOS - GRUPO 3: CONSULTAS CON PAR√ÅMETROS
  // ‚ö†Ô∏è SEPARACI√ìN CR√çTICA: Estas rutas VAN ANTES de ':id' para evitar conflictos
  // ========================================

  /**
   * üîß POR SERVICIO - GET /service-ratings/service/:serviceName
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: @Public() - acceso completamente p√∫blico
   */
  @Get('service/:serviceName')
  @Public() // üîì SEPARACI√ìN: Acceso p√∫blico sin autenticaci√≥n
  @ApiOperation({ summary: 'Obtener calificaciones por servicio espec√≠fico' })
  @ApiResponse({ status: 200, description: 'Calificaciones del servicio' })
  findByService(@Param('serviceName') serviceName: string) {
    return this.serviceRatingService.findByService(serviceName);
  }

  /**
   * üìÇ POR CATEGOR√çA - GET /service-ratings/category/:categoryName
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: @Public() - acceso completamente p√∫blico
   */
  @Get('category/:categoryName')
  @Public() // üîì SEPARACI√ìN: Acceso p√∫blico sin autenticaci√≥n
  @ApiOperation({ summary: 'Obtener calificaciones por categor√≠a' })
  @ApiResponse({ status: 200, description: 'Calificaciones de la categor√≠a' })
  findByCategory(@Param('categoryName') categoryName: string) {
    return this.serviceRatingService.findByCategory(categoryName);
  }

  /**
   * üìä PROMEDIO - GET /service-ratings/average/:serviceName
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: @Public() - acceso completamente p√∫blico
   */
  @Get('average/:serviceName')
  @Public() // üîì SEPARACI√ìN: Acceso p√∫blico sin autenticaci√≥n
  @ApiOperation({ summary: 'Obtener promedio de calificaciones de un servicio' })
  @ApiResponse({ status: 200, description: 'Promedio de calificaciones' })
  getServiceAverage(@Param('serviceName') serviceName: string) {
    return this.serviceRatingService.getServiceAverage(serviceName);
  }

  /**
   * üìÖ REPORTE MENSUAL - GET /service-ratings/monthly-report/:year
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: Guards espec√≠ficos para administradores
   */
  @Get('monthly-report/:year')
  @UseGuards(JwtAuthGuard, RolesGuard) // üîê SEPARACI√ìN: Guards espec√≠ficos para administradores
  @Roles('Super Administrador', 'Administrador')
  @ApiBearerAuth()
  @ApiOperation({ summary: 'Obtener reporte mensual de calificaciones' })
  @ApiResponse({ status: 200, description: 'Reporte mensual' })
  getMonthlyReport(@Param('year', ParseIntPipe) year: number) {
    return this.serviceRatingService.getMonthlyReport(year);
  }

  // ========================================
  // üîç RUTAS CON PAR√ÅMETROS ID - GRUPO 4: OPERACIONES POR ID
  // ‚ö†Ô∏è SEPARACI√ìN CR√çTICA: Estas rutas VAN DESPU√âS de todas las rutas espec√≠ficas
  // ========================================

  /**
   * üîç LEER UNO - GET /service-ratings/:id
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: @Public() - acceso completamente p√∫blico
   */
  @Get(':id')
  @Public() // üîì SEPARACI√ìN: Acceso p√∫blico sin autenticaci√≥n
  @ApiOperation({ summary: 'Obtener calificaci√≥n por ID' })
  @ApiResponse({ status: 200, description: 'Calificaci√≥n encontrada' })
  @ApiResponse({ status: 404, description: 'Calificaci√≥n no encontrada' })
  findOne(@Param('id', ParseIntPipe) id: number) {
    return this.serviceRatingService.findOne(id);
  }

  /**
   * üîé DETALLES COMPLETOS - GET /service-ratings/:id/details
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: @Public() - acceso completamente p√∫blico
   */
  @Get(':id/details')
  @Public() // üîì SEPARACI√ìN: Acceso p√∫blico sin autenticaci√≥n
  @ApiOperation({ summary: 'Obtener calificaci√≥n con detalles completos (MongoDB)' })
  @ApiResponse({ status: 200, description: 'Calificaci√≥n con detalles completos' })
  findOneWithDetails(@Param('id', ParseIntPipe) id: number) {
    return this.serviceRatingService.findOneWithDetails(id);
  }

  /**
   * ‚úèÔ∏è ACTUALIZAR - PATCH /service-ratings/:id
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: Guard espec√≠fico JWT para esta ruta
   */
  @Patch(':id')
  @UseGuards(JwtAuthGuard) // üîê SEPARACI√ìN: Guard espec√≠fico para esta ruta
  @ApiBearerAuth()
  @ApiOperation({ summary: 'Actualizar calificaci√≥n (solo el evaluador o admin)' })
  @ApiResponse({ status: 200, description: 'Calificaci√≥n actualizada exitosamente' })
  update(
    @Param('id', ParseIntPipe) id: number, 
    @Body() updateRatingDto: UpdateServiceRatingDto,
    @GetUser() user: User
  ) {
    return this.serviceRatingService.update(id, updateRatingDto, user.id_usuario);
  }

  /**
   * üóëÔ∏è ELIMINAR - DELETE /service-ratings/:id
   * AGRUPADA: Hereda la ruta base del controlador
   * SEPARADA: Guards espec√≠ficos para administradores
   */
  @Delete(':id')
  @HttpCode(HttpStatus.NO_CONTENT)
  @UseGuards(JwtAuthGuard, RolesGuard) // üîê SEPARACI√ìN: Guards espec√≠ficos para administradores
  @Roles('Super Administrador', 'Administrador')
  @ApiBearerAuth()
  @ApiOperation({ summary: 'Eliminar calificaci√≥n' })
  @ApiResponse({ status: 204, description: 'Calificaci√≥n eliminada exitosamente' })
  remove(@Param('id', ParseIntPipe) id: number) {
    return this.serviceRatingService.remove(id);
  }
}
